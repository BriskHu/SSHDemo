<?xml version="1.0" encoding="UTF-8"?>
<!-- 本文件为Spring的配置文件。使用的Spring Bean Configuration 类型的文件。 -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- 导入资源链接配置文件 -->
	<context:property-placeholder location="classpath:db.properties"/>  <!-- 注意这里使用路径时没有加conf文件夹路径。 -->
	
	<!-- 配置C3P0数据源 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="user" value="${jdbc.user}"></property>
		<property name="password" value="${jdbc.password}"></property>
		<property name="driverClass" value="${jdbc.driverClass}"></property>
		<property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>
		
		<property name="initialPoolSize" value="${jdbc.initPoolSize}"></property>
		<property name="maxPoolSize" value="${jdbc.maxPoolSize}"></property>		
	</bean>
	
	<!-- 配置SessionFactory。创建SessionFactory之后，Hibernate就会自动生成数据表。 -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<!-- hibernate的配置文件在Spring使用时加载 -->
		<property name="configLocation" value="classpath:hibernate.cfg.xml"></property>
		<property name="mappingLocations" value="classpath:ssh/entities/*.hbm.xml"></property>
	</bean>
	
	<!-- 配置Spring的声明式事务 -->
	<!-- 1. 配置Hibernate的事务管理器 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	
	<!-- 2. 配置事务属性 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes> 
			<!-- 表示对所有get开头的方法使用事务，也就是每个getXX方法开始之前会打开Session，在getXX方法结束时会关闭Session。 -->
			<tx:method name="get*" read-only="true"/>
			<tx:method name="lastNameIsValid" read-only="true"/>  <!-- 由于这个读操作不是以get开头的，所以对它进行了单独设置。 -->
			<!-- 这里的*表示任意方法 -->
			<tx:method name="*"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- 3. 配置事务切入点（即事务作用在哪些类、哪些方法上）,再将事务属性和事务切入点关联起来。aop:pointcut属性配置的就是要对哪个类的什么方法使用AOP进行消息拦截。 -->
	<aop:config>
		<!-- expression表达式中的execution内参数的含义：第一个*表示任意修饰符及任意返回值，ssh.service是存放本项目的service的包
			ssh.service.*.*(..)表示ssh.service包下的任意类的任意方法，方法的参数也是任意的。“(..)”表示任意参数。 -->
		<aop:pointcut expression="execution(* ssh.service.*.*(..))" id="txPointcut"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
	</aop:config>
</beans>
