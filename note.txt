1. 加入Spring（本处是在外部环境加入Spring的操作。MyEclipse内部有Spring，加入spring时使用的是内部加入Spring）
	1）导入jar包
	2）配置web.xml文件
	3）加入Spring的配置文件
	
2. 加入Hibernate
	1）同时建立持久化类和其对应的.hbm.xml文件，生成对应的数据表；
	2）Spring整合Hibernate。
	具体步骤如下：
	1） 加入jar包；
	2） 在类路径下创建hibernate.cfg.xml文件，在其中配置hibernate的基本属性；
	3） 建立持久化类，和其对应的.hbm.xml文件；
	4） 将Hibernate整合进Spring中；整合的具体步骤如下：
		a. 加入C3P0数据库管理包和MySQL驱动；
		b. 在Spring的配置文件中配置：数据源，SessionFactory，声明式事务。
	5） 启动项目，观察是否生成了对应的数据表。
	
3. 加入Struts2
	1）加入jar包.若有重复的jar包，需要把版本低的jar包删掉。
	2）在web.xml中配置Struts2的Filter，直接从空白的Struts2项目中的web.xml文件中复制到本项目的web.xml中即可。
	3）加入Struts2的配置文件到本項目中。
	4）将Struts2整合到Spring中。
	整合到Spring的具体步骤：
	1） 加入Struts2的Spring插件的jar包；
	2）在Spring的配置文件中正常配置Action，注意Action的scope为prototype；配置Action就是配置bean就可以了。具体步骤如下：
		a. 创建好JavaBean类， 本处为EmployeeAction类；
		b. 通过Spring方式创建对应bean的配置文件（本项目中的命名是applicationContext-beans.xml，配置bean；
		c. 在该bean配置文件中，完成对bean的配置;
		d. 在struts.xml中配置对应的action。
	3）在Struts2的配置文件中配置Action时，class属性指向该Action在IOC中的ID。

4. 实现功能
	1）获取数据库中的所有记录
		a. 创建交互界面对应的JSP。该JSP有一个链接，点击该链接就显示出所有的记录；
		b. 在JavaBean中创建响应这个点击链接后的action，这就需要EmployeeAction中增加一个方法，该方法完成从数据库中获取数据；
		c. 要从数据库获取数据，就需要有一个对应的DAO来完成数据库的相关操作，本项目中是EmployeeDAO；
		d. 为了实现代码解耦，将Action的具体业务逻辑分离到service包下的具体Service类去实现，本处是EmployeeService类。
		整个动作的流程就是：用户点击链接，ActionBean调用具体方法相应动作，ActionBean中的方法再去调用具体的service方法，具体的service方法使用DAO从数据库取出数据，然后显示。
		注意：
		若在Dao中只查询employee的信息，而且employee和department还是使用的懒加载（在实体类的hbm.xml文件中的many-to-one属性
		默认使用的就是懒加载方式。通过在many-to-one标签中使用“lazy="false"”来关闭懒加载）。页面上使用到department信息时，
		会出现懒加载异常（Hibernate的no session 代理异常，是使用Hibernate时比较常见的异常），代理对象不能初始化。解决方法
		如下：
			i.  关闭懒加载（表间映射的lazy属性设置为false），不推荐使用这种方式；
			ii. 查询employee表时使用“迫切外连接”连接查询department表，这样就会自动关闭懒加载方式；
			iii.使用OpenSessionInViewFilter，这种方式是在页面加载完成后再关闭session，这样也可以实现完全的加载数据。
	2）删除员工信息
	简单版的删除功能，点击删除链接直接删除记录。
		a. 先在JSP中添加一列提供删除功能的接口，本处是设置了一个href；配置好给href的超链接，这个超链接通过struts.xml
		     中的action标签的name属性进入到对应的Action类中进行处理；Struts正是通过拦截器拦截URL，根据action标签的配置
		     来确定URL对应的Action类，完成从url与业务逻辑的关联；
		b. 配置struts.xml中action，本处action的name属性使用的“emp-*”，所以可以用一个action来出来所有以"emp-"开头的url；
		     只需要在配该action下的result属性，确定结果显示页面就可；
		c. 在Action类中，定义删除操作；在Action类中的删除，具体是通过service类，调用Dao类来具体执行删除；
		d. 显示结果页面，本处是直接使用上一个“显示所有员工信息”功能，重新查询数据并显示来完成结果页面。
			
	升级版的删除功能，点击删除链接后先弹出	确认窗口，在点击确定后再删除记录。要实现这种弹出窗口，一般方法是使用jQuery实现。
		a. 将JQuery导入到项目中，JQuery是一个JavaScript文件，在Web-Content目录下创建一个scripts文件夹，下载JQuery文件然
		      后放到该文件夹下，然后在要使用JQuery的jsp文件中导入JQuery（在jsp文件中可使用“<script type="text/javascript" 
		    src="scripts/jquery-1.9.1.min.js"></script>。注意这里使用的相对路径，在正式开发时应使用绝对路径，通过req-
		    uest.context来设置）；
		b. 根据struts2的Ajax使用方式，在Action类中使用struts2的Ajax使用方式重写delete方法，在struts.xml文件中完成相应的
		      配置（根据delete方法的返回结果和struts的Ajax配置方式，修改它对应的result标签。
	说明：
	i.   如果使用不提醒的直接删除方式， 返回值需要是redirect类型的，即result标签的type属性值为redirect，而且是重定向到emp-list；
	ii.  在点击删除按钮后先进行提示，这个提示功能是使用JQuery完成的；
	iii. 无刷新（或自动刷新）是使用Ajax来实现的，在struts中使用Ajax的方法见file:///D:/Softwares/ProgrammingSoftware/Java/Fra-
	mework/Struts2/struts-2.3.32-all/struts-2.3.32/docs/docs/ajax.html。
		
	3）添加员工
		a. 显示表单页面，需要先查询所有的部门信息，以提供给用户选择；
		b. 提交表单信息时，应该首先将表单信息封装成一个对象，这使用Struts2的ModelDriven和Preparable拦截器实现；
		c. 细节问题，由于输入的时间是一个字符串，需要转为date类型对象；这就需要一个转换方法，为了更通用将装换方法封装为一个类。
	具体步骤如下：
		a. 添加一个href，给用户提供执行添加操作的接口；在对应Action类中，添加对该href的响应方法；添加一个表单页面，完成新员工信息的输入；
		b. 为Department表定义一个Dao类；为了重复利用代码，将两个Dao类中共同的代码部分提取出来，形成一个类，EmployeeDao和DepartmentDao
		     继承这个类，实现代码复用；完成DepartmentDao类中的方法实现；
		c. 为了将新增表单里用户输入的数据保存下来，需要针对表单的action属性值进行相应的处理，即在Action类中添加对应的方法；同时，为了实现
		     将表单的数据封装成对象，需要对应的Action类实现ModelDriven和Preparable接口，以使Struts能够拦截下该action然后将数据封装成所需要
		     的对象；
		d. 实现ModelDriven和Preparable接口时，struts默认每次都会去调用prepare()方法，本项目中不需要在prepare()方法中执行操作，所以需要设
		     置一下，让struts不调用prepare()方法；设置方法是，在struts.xml中，重新定义拦截器栈，设置该拦截器栈的prepare的alwaysInvokePrepa-
		   re属性为false即可；具体的拦截器栈配置健struts.xml文件中的注释；
		e. 为了实现日期的字符串与date格式之间的转换，定义了一个converter类；为了转换器能够自动工作，需要在conf文件夹下定义一个xwork-conve-
		   rsion.properties文件，在这个文件中配置转换器。
	小结：
		 （1）首先在页面设置一个链接，供用户操作；单击该链接后，显示添加员工的页面，因此这里有一个action；因为有一个下拉列表，因此在这个
		 	  action中需要查询数据库，并将查询结果放置到request域中，然后这个action返回添加员工页面；
		 	  在添加员工界面中的s:select是struts2的标签，它的listKey的值生成value值，listValue生成label值； 由于这里下拉列表实际上使用的是
		 	  department的id，所以这里name属性值用的“department.id”；
		 （2）由于使用ModelDriven和Preparable拦截器来获取数据，所以用户填完数据，点击提交按钮后，struts首先执行对应action的方法的prepareXX
		 	  方法（即，比如表单设置的action="emp-save"，对应的action类中的方法为save()，那么还需要再创建一个prepareSave()方法，struts会在
		 	  执行save之前首先执行prepareSave方法；所以我们在prepareSave方法中创建一个JavaBean的实例（假设名为model），并将它放置在值栈的栈
		 	  顶，接着Preparable拦截器，将从页面表单获得数据填充到这个对象中；然后调用ModelDriven接口的getModel方法，把填充完的栈顶对象model
		 	  取出来交给action类的对象；
		 	  本项目中使用的是paramsPrepareParamsStack，因此，在程序中：
		 	 a. struts首先执行params拦截器，此时栈顶对象是当前的action对象；但是我们没有使用这个拦截器，所以这个拦截器很快就执行完了；
		 	 b. struts接着执行prepare拦截器，这个拦截器会自动执行它的doIntercept方法；这个方法将检查当前的action是否实现了Preparable接口；
		 		 如果是，则它会自动去调用对应action方法的prepare或prepareXX方法（是在doIntercept方法中，调用invokePrefixMethod方法，这个方法再
		 		 根据alwaysInvokePrepare属性来确定来确定具体调用prepare还是prepareXX），prepare或prepareXX执行完后，doIntercept方法执行结束，
		 		 也是Preparable接口执行结束；此时栈顶对象仍然是当前的action；
		 	 c. struts接着执行ModelDriven拦截器的intercept方法，这个方法也是首先判断当前action类是否实现了ModelDriven接口，如果是则调用该类的
		 		getModel方法（也是ModelDriven接口中的方法），这个方法把上一步的prepare或prepareXX（在接口中是prepareDo）的model对象放到值栈栈
		 		顶，接着ModelDriven拦截器执行结束；此时栈顶对象为model对象，即本项目中的employee对象；
		 	 d. struts再次执行params拦截器，并调用这个拦截器的setParameters方法，将表单数据设置到model对象的对应属性；此时action对象的model对
		 	 	象就完成了初始化；
		 （3）这时struts才调用具体的action方法，完成action的业务处理。
	4）Ajax名字校验
		这个功能的实现逻辑是在用户完成lastName文本框的输入后（这里使用的文本域的change事件监测是否输入完成），使用Ajax将lastName的输入值传到服
		务器。服务器根据此值到数据库中查询，根据查询的结果通过Ajax技术，返回一个标志量。客户端再根据这个标志量，来提示“XXX不可用”或“XXX可用”。
		通过这个名字校验和删除的Ajax校验，基本上就能掌握Struts2中使用Ajax的方法。
	
	5）编辑记录的属性
		实际需要分为两步：先将记录回显出来，然后再将修改后的值保存到数据库中。这个流程是这样的：页面点击链接-->按照链接地址跳转到对应的action-->
	paramsPrepare拦截器工作，首先执行action对应的prepareXXX方法-->接着执行XXX方法-->struts根据XXX方法返回值，同时将model的值放入到值栈栈顶，向
	客户端返回对应的页面进行显示-->单击页面的提交按钮，页面跳转到对应的action-->paramsPrepare拦截器执行-->先执行对应的action的prepareXX方法-->
	然后执行XX方法，将数据保存到数库中-->struts根据XX的返回值，向浏览器返回对应的视图显示编辑后的查询结果->结束。
		对于本项目具体为：
		点击页面“Edit”-->跳转到action的addEmp-->由于配置了paramsPrepare拦截器，所以先执行prepareAddEmp()-->由于配置了ModelDriven拦截器，所以
	接着执行getModel方法，将页面表单中的值封装到model中-->接着执行addEmp()-->接着执行ModelDriven拦截器的getModel方法，将model对象放到值栈栈顶
	-->struts根据addEmp的返回值，向浏览器返回emp-add.jsp页面，同时将model对象的字段值设置到表单中，页面将数据显示出来。
		在数据显示页面点击提交按钮-->跳转到表单action属性对应的save-->先执行prepareSave()-->接着执行getModel()-->接着执行save()，将model中的
	值存储到数据库中，向浏览器返回emp-list.jsp页面-->接着执行getModel()，将model的值放置在值栈栈顶，在页面显示出来。
	
	需要注意的地方如下。
		（1）给记录增加一列编辑操作的列。点击编辑超链接后，转到表单页面回显选中的记录。由于该显示页面与前面的新增页面相同，所以这里直接利用现有
			 的addEmp对应的action在转到页面时，需要提供一个id参数以供查询数据库，因此超链接带需要一个id参数。相应的，对应的Action类中，需要设置
			 一个id属性和对应的set方法。由于前面的步骤中已经设置了，所以这里不要再编写id相关的代码了。
		（2）在点击编辑超链接后，需要通过获得id查询数据库记录进行回显，所以要给addEmp的方法增加一个对应的prepareAddEmp()方法，在这个方法中完成
			 从数据库查询记录，然后显示在页面上。这里要注意的是，由于上面功能实现步骤中，在每次执行prepareSave方法时是新建一个model实例，所以如
			 果不采用一些方式对model的值进行控制，就会导致model的某些字段值为空。解决编辑状态下model的部分字段值为空，有两种方式：a. 使用隐藏域
			 的方式；b. 在prepareXX方法中从数据库取出model而不是新建一个Employee实例。在这两种方式中如何进行选择呢？如果页面的JavaBean的字段不
			 多时可以使用隐藏域的方式；如果需要用到很多隐藏域，或者hibernate缓存足够的情况下可以使用从数据库中取数据。因为访问数据库对性能影响很
			 大，有时我们宁愿麻烦一点采用隐藏域的方式也不使用从数据库中获取。
	  
5. 一些注意事项
	1）因为JavaScript脚本是在客户端运行的，所以scripts文件夹要防止在WEB-INF之外。因为客户端不能访问WEB-INF文件夹内的资源。这里将jsp文件放置
在WEB-INF内，是为了安全考虑，同时也是由于每个JSP都是通过Struts的Action去访问的，所以不存在客户端不能访问的问题。要注意的是：WEB-INF文件夹
客户端是不能访问的，只有服务器可以访问。而服务器访问时，也是通过类似于action等服务器内部转向的方式去访问，不能直接在url中使用相对地址来访问。		
	2）整个项目的流程如下：
		（1）先导入Spring的jar包，完成对Spring的配置（web.xml、applicationContent.xml）；
		（2）然后导入Hibernate的jar包，创建Hibernate的配置文件，包括创建持久化类、hbm.xml文件、持久化类的bean管理文件
			 applicationContext-beans.xml、hibernate.cfg.xml文件、数据库链接属性文件，将Hibernate在Spring中配置（三个方面：配置C3P0数据源
			 （主要是Hibernate基本属性、配置SessionFactory、配置声明式事务（具体分为三步——配置事务管理器、配置事务属性（即指定要对哪些方法使
			 用事务）、配置事务切入点即事务作用于哪些类的那些方法上））；
		（3）然后导入Struts2的jar包，将Struts2整合到Spring中，配置struts2（struts.xml、xwork-conversion.properties）；
		（4）最后编写具体的业务逻辑。
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		